function feedback_analysis(Gd,Fd,sigma_w,Tfinal,newplot)%% Gd               = discrete plant transfer function% Fd               = discrete controller transfer function% sigma_w          = standard deviation of sensor noise% Tfinal           = final time in simulation% newplot          = old plots deleted when newplot=1%%% Initial parameters for simulationh=Gd.Ts;                             % sampling periodN=round(Tfinal/h);                   % number of simulation steps   [Ad,Bd,Cd,Dd]=ssdata(ss(Gd));        % get the corresponding state matrices of Gdn=length(Ad);                        % number of states in the plant modelx=zeros(n,1);                        % initial statey(1)=Cd*x;                           % intial output[phi,theta]=control_init(Fd);        % initialize controller%%% Input signalsr=signal_gen('step',round(0.1*N+1),N+1);        % reference signal r; a step at t=0.1*Tfinalv=-2*signal_gen('step',round(0.5*N+1),N+1);     % load disturbance v; a step at t=0.5*Tfinalw=sigma_w*signal_gen('noise',1,N+1);               % measurement disturbance = white noise%%% Simulationfor k=1:N+1    t(k)=(k-1)*h;                               % t=time vector (intial time = 0)    e(k)=r(k)-y(k)+w(k);                        % e=control error    [u(k),phi]=control_update(phi,theta,e(k));  % u=control signal    x=Ad*x+Bd*(u(k)+v(k));                      % update the plant state x; load disturbance v added to u    y(k+1)=Cd*x;                                % the output y at the next sampling point kh+hend                                             % we assume that Dd=0y=y(1:N+1);%%% Plotif newplot                         % old plots are deleted when newplot = 1    for i=1:6         figure(i); clf    endendfigure(1);plot(t,y,t,r); title('Step response: Plant output y'); hold onha=gca;hl=get(ha,'children');cc=get(ha,'colororder');i=length(hl)/2;im=mod(i-1,7)+1;set(hl(1),'color',cc(im,:));set(hl(2),'color',cc(im,:))figure(2);plot(t,u); title('Step response: Control signal u'); hold onha=gca;hl=get(ha,'children');cc=get(ha,'colororder');i=length(hl);im=mod(i-1,7)+1;set(hl(1),'color',cc(im,:));figure(3);sigma(feedback(Gd*Fd,1)); title('Complementary sensitivity T'); hold onfigure(4);sigma(feedback(Fd,Gd)); title('Control sensitivity Su'); hold onfigure(5);sigma(Fd); title('Controller F'); hold onMSmax=1.7;MTmax=1.3;figure(6);[re,im,w]=nyquist(Gd*Fd);axis([-4.5 1.5 -3 3]); hold onif newplot    pcircle(1/MSmax,-1,0); pcircle(1,0,0); pmcircle(MTmax);    plot(get(gca,'XLim'),[0 0],'k',[0 0],get(gca,'YLim'),'k','linewidth',0.5);    title('Nyquist');endplot(squeeze(re),squeeze(im));  ha=gca;hl=get(ha,'children');cc=get(ha,'colororder');i=length(hl);im=mod(i-6,7)+1;set(hl(1),'color',cc(im,:));%%% CriteriaJvmax=norm(feedback(Gd,Fd),'inf');Jumax=norm(feedback(Fd,Gd),'inf');MS=norm(feedback(1,Gd*Fd),'inf');MT=norm(feedback(Gd*Fd,1),'inf');wb=bandwidth(feedback(Gd*Fd,1));disp(['Jvmax=' num2str(Jvmax,3) '  Jumax=' num2str(Jumax,3) '  MS=' num2str(MS,3) '  MT=' num2str(MT,3) ...    '  wb=' num2str(wb,3) '  ws/wb=' num2str((2*pi/h)/wb,2) ]); disp(' ');%%% Functions  %%%% Signal generatorfunction u=signal_gen(signal_type,N1,N2)u=zeros(1,N2);switch signal_type    case 'step'        u(N1:N2)=1;    case 'noise'        u(N1:N2)=randn(1,N2-N1+1);endreturn    % Plot a circlefunction pcircle(r,x0,y0)plot(r*exp(i*2*pi/100*[0:100])+(x0+i*y0),'k','linewidth',0.5)% Plot an MT-circlefunction pmcircle(M)alfa=M*M-1;pcircle(M/alfa,-M*M/alfa,0)% Bandwidthfunction wb=bandwidth(Gry)[sv,w]=sigma(Gry);gainwb=sv(1,1)/sqrt(2);[wb,kwb]=inversefcn(w,sv(1,:),gainwb);if kwb(1)>0    k=kwb(end);    [svwb,ww]=sigma(Gry,{w(k),w(k+1)});    [wb,kwb]=inversefcn(ww,svwb(1,:),gainwb);end   returnfunction [xval,xindx,zval]=inversefcn(x,y,yconst,z)k=0;xval=NaN;xindx=0;zval=NaN;for i=1:length(x)-1   if (y(i)>=yconst & y(i+1)<=yconst) | ... %crossing y-value         (y(i)<=yconst & y(i+1)>=yconst)      k=k+1;      xindx(k)=i;      if relequal(y(i+1),y(i),sqrt(eps))         xval(k)=x(i);      else         xval(k)=x(i)+(x(i+1)-x(i))/(y(i+1)-y(i))*...            (yconst-y(i));      end      if length(xval)>1         if relequal(xval(k),xval(k-1),sqrt(eps)*1E-3)            k=k-1;            xval=xval(1:k);            xindx=xindx(1:k);         end      end   endendif nargin==4 & nargout==3 & xindx(1)>0   for k=1:length(xindx)      i=xindx(k);      if relequal(x(i+1),x(i),sqrt(eps))         zval(k)=z(i);      else         zval(k)=z(i)+(z(i+1)-z(i))/(x(i+1)-x(i))*...            (xval(k)-x(i));      end   endendreturnfunction [y,reldiff]=relequal(x1,x0,reps)y=0;reldiff=abs(x1-x0);if reldiff<=eps*100   y=1;else    reldiff=reldiff/max(abs(x1),abs(x0));   if reldiff<=reps      y=1;   endendreturn