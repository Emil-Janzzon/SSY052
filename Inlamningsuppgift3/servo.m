function servo(newplot)%% newplot       = old plots deleted when newplot=1, %                 otherwise old plots remainh=0.05;         % sampling periodTfinal=50;      % final time in simulationsigma_w=0.02;   % standard deviation of sensor noise%%% Plant models=tf('s');G=1/s/(1+s)/(1+0.2*s);              % nominal model%%% Controller = 'PD' 'PID' or 'PIDf'controller='PID';switch controller    case 'PD'                      % PD controller        Kp=1.8;  tau=1;  beta=5;        F=Kp*(1+s*tau)/(1+s*tau/beta);    case 'PID'                     % PID controller        beta=15;  zeta=1.0;        phim=45;        wc=1.84;        [F,Ki,Kinf,tau,err]=pid_design(G,wc,phim,beta,zeta);        F=Ki/s*(1+2*zeta*s*tau+(s*tau)^2)/(1+s*tau/beta);    case 'PIDf'                    % PIDf controller        beta=15;  zeta=1.0;        phim=45;        wc=1.6;        [F,Ki,Kinf,tau,err]=pid_design(G,wc,phim,beta,zeta);        zetaf=0.4;        F=Ki/s*(1+2*zeta*s*tau+(s*tau)^2)/(1+2*zetaf*s*tau/beta+(s*tau/beta)^2);   enddisp(' ');disp(['Controller = ' controller ])%%% Additional (unmodeled) plant HF-resonance when Gres = 1Gres=0;if Gres                             %     zeta=0.01;    wn=7.5;    Gdelta=wn^2/(s^2+2*zeta*wn*s+wn^2);     G=G*Gdelta;end%%% Feedback Analaysis for corresponding discrete-time systemGd=c2d(G,h);       % convert to a discrete-time model Gd Fd=c2d(F,h);       % convert to a discrete-time controller Fdif nargin==0, newplot=1; endfeedback_analysis(Gd,Fd,sigma_w,Tfinal,newplot)